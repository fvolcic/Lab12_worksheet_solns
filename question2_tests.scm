(load "solution/question2.scm")

(define (assert-equal x y test)
  (if (not (equal? x y))
      (begin (display "Error for test ")
             (write test)
             (display ": ")
             (write x)
             (display " not equal? to ")
             (write y)
             (newline)
      )
      (display "pass\n")
  )
)

; my-or tests
(display "running my-or tests\n")
(assert-equal (my-or) #f 'my-or)
(define x 0)
(assert-equal (my-or (= x 0) (/ x 0)) #t 'my-or)
(define x 1)
(assert-equal (my-or (= x 0) (/ 3 x)) 3 'my-or)
(assert-equal (my-or (memq 'b '(a b c)) (/ 3 0)) '(b c) 'my-or)